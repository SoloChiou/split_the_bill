version: "3.1"

services:
  mysql:
    image: mysql:8.0
    container_name: mysql

    #本地測試時要開
    # platform: linux/x86_64

    ports:
      - "3310:3306"
    volumes:
      - mysql-data-volumes:/var/lib/mysql
      - ./mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    environment:
      - MYSQL_USER=solochiou
      - MYSQL_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=split_the_bill
    networks:
      - my_network

  flask_app:
    build:
      context: .
      dockerfile: Dockerfile-flask
    container_name: flask_app
    expose:
      - "80"
    ports:
      - "5000:5000"
    environment:
      # (本地開發用@localhost:主機端口, 連上docker用@mysql:容器端口)
      - DATABASE_URL=mysql+mysqlconnector://solochiou:password@mysql:3306/split_the_bill
      - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN}
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
    depends_on:
      - mysql
    networks:
      - my_network
    volumes:
      # 使本地端更改時, 容器內code也會同步更新
      # 語法 [本地容器位置]:[掛載容器位置]
      - .:/app

  vue_app_dev:
    build:
      context: .
      dockerfile: Dockerfile-vue_dev
    container_name: vue_app_dev
    ports:
      - "8080:8080"
    networks:
      - my_network
    volumes:
      - ./frontend:/frontend
      - /frontend/node_modules
    command: npm run dev -- --host 0.0.0.0

  vue_app_prod:
    build:
      context: .
      dockerfile: Dockerfile-vue_prod
    container_name: vue_app_prod
    expose:
      - "80"
    networks:
      - my_network
    # volumes:
      # - ./frontend/dist:/usr/share/nginx/html

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:80"
    volumes:
      - ./frontend/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - vue_app_prod
      - flask_app
    networks:
      - my_network

volumes:
  mysql-data-volumes:

networks:
  my_network:
    driver: bridge
